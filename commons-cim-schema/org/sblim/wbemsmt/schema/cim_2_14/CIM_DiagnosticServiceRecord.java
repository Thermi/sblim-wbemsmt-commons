/** 
 * CIM_DiagnosticServiceRecord.java
 *
 * (C) Copyright IBM Corp. 2005
 *
 * THIS FILE IS PROVIDED UNDER THE TERMS OF THE COMMON PUBLIC LICENSE
 * ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS FILE
 * CONSTITUTES RECIPIENTS ACCEPTANCE OF THE AGREEMENT.
 *
 * You can obtain a current copy of the Common Public License from
 * http://www.opensource.org/licenses/cpl1.0.php
 *
 * @author:	ECCG 0.9.7 generated 
 * 			(author should be changed, e.g. First and Last Name <xxx@cc.ibm.com>)
 *
 * Contributors:
 *
 *
 * Description:  While a DiagnosticService is running, data generated by the service may be
 * recorded in DiagnosticServiceRecord objects. A DiagnosticServiceRecord is
 * related to its MessageLog via an instance of the RecordInLog aggregation
 * class.
 * 
 */

package org.sblim.wbemsmt.schema.cim_2_14;

import java.security.InvalidParameterException;
import java.util.Iterator;
import java.util.Vector;

import org.sblim.wbem.cim.CIMDataType;
import org.sblim.wbem.cim.CIMException;
import org.sblim.wbem.cim.CIMInstance;
import org.sblim.wbem.cim.CIMObjectPath;
import org.sblim.wbem.cim.CIMProperty;
import org.sblim.wbem.cim.CIMValue;
import org.sblim.wbem.cim.UnsignedInt32;


/**
 *  While a DiagnosticService is running, data generated by the service may be
 * recorded in DiagnosticServiceRecord objects. A DiagnosticServiceRecord is
 * related to its MessageLog via an instance of the RecordInLog aggregation
 * class.
 */
public class CIM_DiagnosticServiceRecord extends CIM_DiagnosticRecord  {
	
	public final static String CIM_CLASS_NAME = "CIM_DiagnosticServiceRecord"; //$NON-NLS-1$
	public final static String CIM_CLASS_DISPLAYNAME = CIM_CLASS_NAME;

	private boolean validCimInstance = false;
	
	public final static String CIM_CLASS_VERSION = "2.9.0";
	
	
	/**
	*	If applicable, this string should contain one or more vendor specific error codes that the diagnostic service detected. These error codes may be used by the vendor for variety of purposes such as: fault data base indexing, field service trouble ticketing, product quality tracking, part failure history, etc. Since these codes are for vendor purposes they may assume any form. Details on suggested use cases will be left to white papers. The array of error codes has model correspondence with an ErrorCount array so the number of errors reported can be analyzed by individual error code.
	*/
	public final static String CIM_PROPERTY_ERRORCODE = "ErrorCode"; //$NON-NLS-1$
	/**
	*	Since some tests may detect transient and correctable errors such as a network diagnostic or memory test, an error count is useful to indicate the severity of the failure. This field contains an integer value of the number of errors detected by the test. The ErrorCount is an array with model correspondence to ErrorCode so that the test can report an ErrorCount on each type of error encountered. It is recommended that hard errors and correctable or recoverable errors be given different codes so that clients with knowledge of the error codes can evaluate correctable, recoverable, and hard errors independently.
	*/
	public final static String CIM_PROPERTY_ERRORCOUNT = "ErrorCount"; //$NON-NLS-1$
	/**
	*	Since some tests may be looped, it is useful to report how many iterations passed and failed. This is relevant in analyzing transitory failures. For example, if all the errors occurred in just one of 100 iterations, the device may be viewed as OK or marginal, to be monitored further rather then failed. Note: LoopsPassed & LoopsFailed should add up to the loops completed. 
A value for this property would likely be reported with a DiagnosticServiceRecord.RecordType value = "ResultSummary", which contains a summary result covering all iterations of a looped service.
	*/
	public final static String CIM_PROPERTY_LOOPSFAILED = "LoopsFailed"; //$NON-NLS-1$
	/**
	*	Since some tests may be looped, it is useful to report how many iterations passed and failed. This is relevant in analyzing transitory failures. For example if all the errors occurred in just one of 100 iterations, the device may be viewed as OK or marginal, to be monitored further rather then failed. Note: LoopsPassed & LoopsFailed should add up to the loops completed. 
A value for this property would likely be reported with a DiagnosticServiceRecord.RecordType value = "ResultSummary", which contains a summary result covering all iterations of a looped service.
	*/
	public final static String CIM_PROPERTY_LOOPSPASSED = "LoopsPassed"; //$NON-NLS-1$
	
	
	

	public static Vector CIM_PropertyNameList	= new Vector();
	public static Vector CIM_PropertyList 		= new Vector();
	public static Vector Java_Package_List 		= new Vector();
	
	static {
		CIM_PropertyNameList.add(CIM_PROPERTY_ERRORCODE);
		CIM_PropertyNameList.add(CIM_PROPERTY_ERRORCOUNT);
		CIM_PropertyNameList.add(CIM_PROPERTY_LOOPSFAILED);
		CIM_PropertyNameList.add(CIM_PROPERTY_LOOPSPASSED);
				
		for (int i = 0; i < CIM_DiagnosticRecord.CIM_PropertyNameList.size(); i++) {
			if (((String)CIM_DiagnosticRecord.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_ERRORCODE)||
				((String)CIM_DiagnosticRecord.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_ERRORCOUNT)||
				((String)CIM_DiagnosticRecord.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_LOOPSFAILED)||
				((String)CIM_DiagnosticRecord.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_LOOPSPASSED)){
				continue;
			}
			
			CIM_DiagnosticServiceRecord.CIM_PropertyNameList.add(CIM_DiagnosticRecord.CIM_PropertyNameList.elementAt(i));
		}
		
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_ERRORCODE, new CIMValue(null, new CIMDataType(CIMDataType.STRING_ARRAY))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_ERRORCOUNT, new CIMValue(null, new CIMDataType(CIMDataType.UINT32_ARRAY))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_LOOPSFAILED, new CIMValue(null, new CIMDataType(CIMDataType.UINT32))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_LOOPSPASSED, new CIMValue(null, new CIMDataType(CIMDataType.UINT32))));
				
		for (int i = 0; i < CIM_DiagnosticRecord.CIM_PropertyList.size(); i++) {
			if (((CIMProperty)CIM_DiagnosticRecord.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_ERRORCODE)||
				((CIMProperty)CIM_DiagnosticRecord.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_ERRORCOUNT)||
				((CIMProperty)CIM_DiagnosticRecord.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_LOOPSFAILED)||
				((CIMProperty)CIM_DiagnosticRecord.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_LOOPSPASSED)){
				continue;
			}
			
			CIM_DiagnosticServiceRecord.CIM_PropertyList.add(CIM_DiagnosticRecord.CIM_PropertyList.elementAt(i));
		}
		
		Java_Package_List.add("org.sblim.wbemsmt.schema.cim_2_14");
				
		for (int i = 0; i < CIM_DiagnosticRecord.Java_Package_List.size(); i++) {
			if (((String)CIM_DiagnosticRecord.Java_Package_List.elementAt(i)).equals("org.sblim.wbemsmt.schema.cim_2_14")){
				continue;
			}
			
			Java_Package_List.add(CIM_DiagnosticRecord.Java_Package_List.elementAt(i));
		}
	};
			
	
	
	
	
	//**********************************************************************
	// Constructors 	
	//**********************************************************************

	/**
	*	Class constructor
	*/	
	public CIM_DiagnosticServiceRecord() {

		this.cimInstance	= new CIMInstance();
		
		for (int i = 0; i < CIM_PropertyList.size(); i++) {
			this.cimInstance.addProperty((CIMProperty)((CIMProperty)CIM_PropertyList.get(i)).clone());
		}
		
		this.cimObjectPath 	= new CIMObjectPath(CIM_CLASS_NAME);
		this.cimInstance.setObjectPath(this.cimObjectPath);

		this.original_cimInstance	= (CIMInstance)this.cimInstance.clone();

		setValidCimInstance(false);
	}


	/**
	*	Class constructor
	*/	
	public CIM_DiagnosticServiceRecord(Vector keyProperties){ 
		this();
		
		if (keyProperties == null) {
			throw new InvalidParameterException("The keyProperties parameter does not contain a valid reference.");
		
		}
		
		Iterator iter = keyProperties.iterator();
		while (iter.hasNext()) {
			Object property = iter.next();
			
			if (property instanceof CIMProperty) {
				CIMProperty keyProperty = (CIMProperty)property;
				this.cimObjectPath.addKey(keyProperty);
				
				if (this.cimInstance.getProperty(keyProperty.getName()) != null) {
					this.cimInstance.removeProperty(keyProperty.getName());
				}
				this.cimInstance.addProperty(keyProperty);
				
			} else {
				throw new InvalidParameterException("The keyProperties parameter should only contain objects of class CIMProperty.");
				
			}
		}
		
		setValidCimInstance(false);
	}

	
	/**
	*	Class constructor
	*/	
	public CIM_DiagnosticServiceRecord(CIMObjectPath cimObjectPath, CIMInstance cimInstance){ 
		
		if (cimInstance == null) {
			throw new InvalidParameterException("The cimInstance parameter does not contain a valid reference.");
		
		} else if (cimObjectPath == null){
			throw new InvalidParameterException("The cimObjectPath parameter does not contain a valid reference.");		
		
		} else if (!CIM_CLASS_NAME.equals(cimInstance.getClassName())) {
			throw new InvalidParameterException("The class of the cimInstance must be of type " + CIM_CLASS_NAME + ".");
		}
		
		setCimInstance(cimInstance);
		this.original_cimInstance = (CIMInstance)cimInstance.clone();
		this.cimObjectPath        = cimObjectPath;
		setValidCimInstance(true);
	}

	
	/**
	*	The method returns the display name of the class
	*/	
	public String getClassDisplayName(){
		return CIM_CLASS_DISPLAYNAME;
	}
	
	//**********************************************************************
	// Instance methods
	//**********************************************************************

	/**
	*	no description
	*/	
	public boolean isDataValid(Vector invalidProperties) {
		boolean result = true;
		
		if (invalidProperties == null) {
			invalidProperties = new Vector();
		} else {
			invalidProperties.removeAllElements();
		}
		
		return result;
	}
	
	/**
	 * @return Returns the validCimInstance.
	 */
	public boolean isValidCimInstance() {
		return this.validCimInstance;
	}
	
	/**
	 * @param validCimInstance The validCimInstance to set.
	 */
	private void setValidCimInstance(boolean isValidCimInstance) {

		this.validCimInstance = isValidCimInstance;
	}
	
	
	/**
	*	The method returns this CIM instance
	*/
	public CIMInstance getCimInstance() {
		
		return this.cimInstance;
	}
	
	
	/**
	*	The method sets this CIM instance
	*/
	public void setCimInstance(CIMInstance cimInstance) {
		
		this.cimInstance = cimInstance;
	}
	
		
	/**
	*	The method returns this CIM object path
	*/
	public CIMObjectPath getCimObjectPath() {
		return this.cimObjectPath;
	}
	
	
	/**
	*	The method checks if the cimInstance has been modified
	*/
	public boolean isModified() {
	    
	    if (!this.original_cimInstance.equals(this.cimInstance)) 
	        return true;
	    
	    return false;
	}
	
	
	/**
	*	The method resets the values of the cimInstance
	*/	
	public void resetValues() {
	    this.cimInstance = (CIMInstance)this.original_cimInstance.clone();
	}
	
	
	/**
	*	The method checks if the cimInstance equals an other cimInstance
	*/	
	public boolean equals(Object object) {
	    
	    if (!(object instanceof CIM_DiagnosticServiceRecord)) {
	        return false;
	    }
	    
	    if (this.cimInstance == null && ((CIM_DiagnosticServiceRecord)object).cimInstance != null) {
	    	return false;
	    	
	    } else if (this.cimInstance != null && ((CIM_DiagnosticServiceRecord)object).cimInstance == null) {
	    	return false;
	    	
	    } else if (this.cimInstance != null && !this.cimInstance.equals(((CIM_DiagnosticServiceRecord)object).cimInstance)) {
	    	return false;
	    	
	    } else if (this.original_cimInstance == null && ((CIM_DiagnosticServiceRecord)object).original_cimInstance != null) {
	    	return false;
	    	
	    } else if (this.original_cimInstance != null && ((CIM_DiagnosticServiceRecord)object).original_cimInstance == null) {
	    	return false;
	    	
	    } else if (this.original_cimInstance != null && !this.original_cimInstance.equals(((CIM_DiagnosticServiceRecord)object).original_cimInstance)) {
	        return false;
	        
	    } else if (this.cimObjectPath == null && ((CIM_DiagnosticServiceRecord)object).cimObjectPath != null) {
	    	return false;
	    	
	    } else if (this.cimObjectPath != null && ((CIM_DiagnosticServiceRecord)object).cimObjectPath == null) {
	    	return false;
		    	
	    } else if (this.cimObjectPath != null && !this.cimObjectPath.equals(((CIM_DiagnosticServiceRecord)object).cimObjectPath)) {
	        return false;
	        
	    } 
	    
	    return true;
	}
	
	/**
	*	The method return this method as a string
	*/	
	public String toString() {
		return this.cimInstance.toString();
	}

	//*****************************************************
	// Associators methods
	//*****************************************************
	
	
	
	//*****************************************************
	// Attribute methods
	//*****************************************************
	
	// Attribute ErrorCode
	
	public String[] get_ErrorCode() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCODE);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCODE + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING_ARRAY) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCODE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING_ARRAY) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		Vector returnedVector = (Vector)currentProperty.getValue().getValue();
		
		String[] resultArray = new String[returnedVector!=null?returnedVector.size():0];
		for (int i = 0; i < resultArray.length; i++) {
			resultArray[i] = (String)returnedVector.get(i);
		}
		
		return resultArray;
	}
	    
			
	public void set_ErrorCode(String[] newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCODE);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCODE + " could not be found");
    		
		} else if (!CIM_DiagnosticServiceRecordHelper.isValid_ErrorCode(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCODE);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING_ARRAY) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCODE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING_ARRAY) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.STRING_ARRAY));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute ErrorCount
	
	public UnsignedInt32[] get_ErrorCount() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCOUNT);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCOUNT + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT32_ARRAY) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCOUNT + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT32_ARRAY) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		Vector returnedVector = (Vector)currentProperty.getValue().getValue();
		
		UnsignedInt32[] resultArray = new UnsignedInt32[returnedVector!=null?returnedVector.size():0];
		for (int i = 0; i < resultArray.length; i++) {
			resultArray[i] = (UnsignedInt32)returnedVector.get(i);
		}
		
		return resultArray;
	}
	    
			
	public void set_ErrorCount(UnsignedInt32[] newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCOUNT);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCOUNT + " could not be found");
    		
		} else if (!CIM_DiagnosticServiceRecordHelper.isValid_ErrorCount(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCOUNT);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT32_ARRAY) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_ERRORCOUNT + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT32_ARRAY) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.UINT32_ARRAY));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute LoopsFailed
	
	public UnsignedInt32 get_LoopsFailed() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSFAILED);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSFAILED + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT32) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSFAILED + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT32) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (UnsignedInt32)currentProperty.getValue().getValue();
	}
	    
			
	public void set_LoopsFailed(UnsignedInt32 newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSFAILED);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSFAILED + " could not be found");
    		
		} else if (!CIM_DiagnosticServiceRecordHelper.isValid_LoopsFailed(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSFAILED);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT32) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSFAILED + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT32) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.UINT32));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute LoopsPassed
	
	public UnsignedInt32 get_LoopsPassed() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSPASSED);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSPASSED + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT32) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSPASSED + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT32) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (UnsignedInt32)currentProperty.getValue().getValue();
	}
	    
			
	public void set_LoopsPassed(UnsignedInt32 newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSPASSED);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSPASSED + " could not be found");
    		
		} else if (!CIM_DiagnosticServiceRecordHelper.isValid_LoopsPassed(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSPASSED);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT32) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_DiagnosticServiceRecord.CIM_PROPERTY_LOOPSPASSED + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT32) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.UINT32));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	
	
	//*****************************************************
	// Invoke methods
	//*****************************************************
	
	

}
