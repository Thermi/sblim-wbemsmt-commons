/** 
 * CIM_Chassis.java
 *
 * (C) Copyright IBM Corp. 2005
 *
 * THIS FILE IS PROVIDED UNDER THE TERMS OF THE COMMON PUBLIC LICENSE
 * ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS FILE
 * CONSTITUTES RECIPIENTS ACCEPTANCE OF THE AGREEMENT.
 *
 * You can obtain a current copy of the Common Public License from
 * http://www.opensource.org/licenses/cpl1.0.php
 *
 * @author:	ECCG 0.9.7 generated 
 * 			(author should be changed, e.g. First and Last Name <xxx@cc.ibm.com>)
 *
 * Contributors:
 *
 *
 * Description:  The Chassis class represents the PhysicalElements that enclose other Elements
 * and provide definable functionality, such as a desktop, processing node, UPS,
 * disk or tape storage, or a combination of these.
 * 
 */

package org.sblim.wbemsmt.schema.cim_2_14;

import java.lang.reflect.Constructor;
import java.security.InvalidParameterException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Vector;

import org.sblim.wbem.cim.CIMDataType;
import org.sblim.wbem.cim.CIMException;
import org.sblim.wbem.cim.CIMInstance;
import org.sblim.wbem.cim.CIMObjectPath;
import org.sblim.wbem.cim.CIMProperty;
import org.sblim.wbem.cim.CIMValue;
import org.sblim.wbem.cim.UnsignedInt16;
import org.sblim.wbem.client.CIMClient;
import org.sblim.wbem.client.CIMEnumeration;



/**
 *  The Chassis class represents the PhysicalElements that enclose other Elements
 * and provide definable functionality, such as a desktop, processing node, UPS,
 * disk or tape storage, or a combination of these.
 */
public class CIM_Chassis extends CIM_PhysicalFrame  {
	
	public final static String CIM_CLASS_NAME = "CIM_Chassis"; //$NON-NLS-1$
	public final static String CIM_CLASS_DISPLAYNAME = CIM_CLASS_NAME;

	private boolean validCimInstance = false;
	
	public final static String CIM_CLASS_VERSION = "2.14.0";
	public final static String CIM_ASSOCIATOR_CLASS_NAME_CIM_CHASSISINRACK = "CIM_ChassisInRack"; //$NON-NLS-1$
	public final static String CIM_ASSOCIATOR_CLASS_NAME_CIM_DOCKED = "CIM_Docked"; //$NON-NLS-1$
	public final static String CIM_ASSOCIATOR_CLASS_NAME_CIM_PACKAGEINCHASSIS = "CIM_PackageInChassis"; //$NON-NLS-1$
	
	
	/**
	*	ChassisPackageType indicates the physical form factor for the type of Chassis. This property may have a value when the PackageType property contains the value 3 "Chassis Frame". 
A value of 28 "Blade Enclosure" shall indicate the Chassis is designed to contain one or more PhysicalPackage(s) of PackageType 16 "Blade" or PackageType 17 "Blade Expansion".
	*/
	public final static String CIM_PROPERTY_CHASSISPACKAGETYPE = "ChassisPackageType"; //$NON-NLS-1$
	/**
	*	A string providing more information on the ChassisPackageType.
	*/
	public final static String CIM_PROPERTY_CHASSISTYPEDESCRIPTION = "ChassisTypeDescription"; //$NON-NLS-1$
	/**
	*	The use of this property is deprecated in lieu of ChassisPackageType. A physical package should not have multiple form factors. Therefore, this property is being deprecated in lieu of a single value property. 
An enumerated, integer-valued array indicating the type of Chassis.
	*/
	public final static String CIM_PROPERTY_CHASSISTYPES = "ChassisTypes"; //$NON-NLS-1$
	/**
	*	Current required by the Chassis at 120V. If power is provided by the Chassis (as in the case of a UPS), this property may indicate the amperage produced, as a negative number.
	*/
	public final static String CIM_PROPERTY_CURRENTREQUIREDORPRODUCED = "CurrentRequiredOrProduced"; //$NON-NLS-1$
	/**
	*	Amount of heat generated by the Chassis in BTU/hour.
	*/
	public final static String CIM_PROPERTY_HEATGENERATION = "HeatGeneration"; //$NON-NLS-1$
	/**
	*	MultipleSystemSupport indicates whether or not this chassis supports multiple systems, for example server blades.
	*/
	public final static String CIM_PROPERTY_MULTIPLESYSTEMSUPPORT = "MultipleSystemSupport"; //$NON-NLS-1$
	/**
	*	Integer indicating the number of power cords which must be connected to the Chassis, for all the componentry to operate.
	*/
	public final static String CIM_PROPERTY_NUMBEROFPOWERCORDS = "NumberOfPowerCords"; //$NON-NLS-1$
	/**
	*	RackMountable indicates whether or not the chassis is Rack Mountable.
	*/
	public final static String CIM_PROPERTY_RACKMOUNTABLE = "RackMountable"; //$NON-NLS-1$
	/**
	*	The use of this property is deprecated in lieu of a single value property, ChassisTypeDescription. 
An array of free-form strings providing more information on the ChassisTypes array entries. Note, each entry of this array is related to the entry in ChassisTypes that is located at the same index.
	*/
	public final static String CIM_PROPERTY_TYPEDESCRIPTIONS = "TypeDescriptions"; //$NON-NLS-1$
	
	
	

	public static Vector CIM_PropertyNameList	= new Vector();
	public static Vector CIM_PropertyList 		= new Vector();
	public static Vector Java_Package_List 		= new Vector();
	
	static {
		CIM_PropertyNameList.add(CIM_PROPERTY_CHASSISPACKAGETYPE);
		CIM_PropertyNameList.add(CIM_PROPERTY_CHASSISTYPEDESCRIPTION);
		CIM_PropertyNameList.add(CIM_PROPERTY_CHASSISTYPES);
		CIM_PropertyNameList.add(CIM_PROPERTY_CURRENTREQUIREDORPRODUCED);
		CIM_PropertyNameList.add(CIM_PROPERTY_HEATGENERATION);
		CIM_PropertyNameList.add(CIM_PROPERTY_MULTIPLESYSTEMSUPPORT);
		CIM_PropertyNameList.add(CIM_PROPERTY_NUMBEROFPOWERCORDS);
		CIM_PropertyNameList.add(CIM_PROPERTY_RACKMOUNTABLE);
		CIM_PropertyNameList.add(CIM_PROPERTY_TYPEDESCRIPTIONS);
				
		for (int i = 0; i < CIM_PhysicalFrame.CIM_PropertyNameList.size(); i++) {
			if (((String)CIM_PhysicalFrame.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_CHASSISPACKAGETYPE)||
				((String)CIM_PhysicalFrame.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_CHASSISTYPEDESCRIPTION)||
				((String)CIM_PhysicalFrame.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_CHASSISTYPES)||
				((String)CIM_PhysicalFrame.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_CURRENTREQUIREDORPRODUCED)||
				((String)CIM_PhysicalFrame.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_HEATGENERATION)||
				((String)CIM_PhysicalFrame.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_MULTIPLESYSTEMSUPPORT)||
				((String)CIM_PhysicalFrame.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_NUMBEROFPOWERCORDS)||
				((String)CIM_PhysicalFrame.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_RACKMOUNTABLE)||
				((String)CIM_PhysicalFrame.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_TYPEDESCRIPTIONS)){
				continue;
			}
			
			CIM_Chassis.CIM_PropertyNameList.add(CIM_PhysicalFrame.CIM_PropertyNameList.elementAt(i));
		}
		
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_CHASSISPACKAGETYPE, new CIMValue(null, new CIMDataType(CIMDataType.UINT16))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_CHASSISTYPEDESCRIPTION, new CIMValue(null, new CIMDataType(CIMDataType.STRING))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_CHASSISTYPES, new CIMValue(null, new CIMDataType(CIMDataType.UINT16_ARRAY))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_CURRENTREQUIREDORPRODUCED, new CIMValue(null, new CIMDataType(CIMDataType.SINT16))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_HEATGENERATION, new CIMValue(null, new CIMDataType(CIMDataType.UINT16))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_MULTIPLESYSTEMSUPPORT, new CIMValue(null, new CIMDataType(CIMDataType.UINT16))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_NUMBEROFPOWERCORDS, new CIMValue(null, new CIMDataType(CIMDataType.UINT16))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_RACKMOUNTABLE, new CIMValue(null, new CIMDataType(CIMDataType.UINT16))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_TYPEDESCRIPTIONS, new CIMValue(null, new CIMDataType(CIMDataType.STRING_ARRAY))));
				
		for (int i = 0; i < CIM_PhysicalFrame.CIM_PropertyList.size(); i++) {
			if (((CIMProperty)CIM_PhysicalFrame.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_CHASSISPACKAGETYPE)||
				((CIMProperty)CIM_PhysicalFrame.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_CHASSISTYPEDESCRIPTION)||
				((CIMProperty)CIM_PhysicalFrame.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_CHASSISTYPES)||
				((CIMProperty)CIM_PhysicalFrame.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_CURRENTREQUIREDORPRODUCED)||
				((CIMProperty)CIM_PhysicalFrame.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_HEATGENERATION)||
				((CIMProperty)CIM_PhysicalFrame.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_MULTIPLESYSTEMSUPPORT)||
				((CIMProperty)CIM_PhysicalFrame.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_NUMBEROFPOWERCORDS)||
				((CIMProperty)CIM_PhysicalFrame.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_RACKMOUNTABLE)||
				((CIMProperty)CIM_PhysicalFrame.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_TYPEDESCRIPTIONS)){
				continue;
			}
			
			CIM_Chassis.CIM_PropertyList.add(CIM_PhysicalFrame.CIM_PropertyList.elementAt(i));
		}
		
		Java_Package_List.add("org.sblim.wbemsmt.schema.cim_2_14");
				
		for (int i = 0; i < CIM_PhysicalFrame.Java_Package_List.size(); i++) {
			if (((String)CIM_PhysicalFrame.Java_Package_List.elementAt(i)).equals("org.sblim.wbemsmt.schema.cim_2_14")){
				continue;
			}
			
			Java_Package_List.add(CIM_PhysicalFrame.Java_Package_List.elementAt(i));
		}
	};
			
	public final static String[] CIM_VALUEMAP_CHASSISPACKAGETYPE = {"Unknown","Other","SMBIOS Reserved","Desktop","Low Profile Desktop","Pizza Box","Mini Tower","Tower","Portable","LapTop","Notebook","Hand Held","Docking Station","All in One","Sub Notebook","Space-Saving","Lunch Box","Main System Chassis","Expansion Chassis","SubChassis","Bus Expansion Chassis","Peripheral Chassis","Storage Chassis","SMBIOS Reseved","Sealed-Case PC","SMBIOS Reserved","CompactPCI","AdvancedTCA","Blade Enclosure","DMTF Reserved","Vendor Reserved"};
	public final static String[] CIM_VALUEMAP_CHASSISTYPES = {"Other","Unknown","Desktop","Low Profile Desktop","Pizza Box","Mini Tower","Tower","Portable","LapTop","Notebook","Hand Held","Docking Station","All in One","Sub Notebook","Space-Saving","Lunch Box","Main System Chassis","Expansion Chassis","SubChassis","Bus Expansion Chassis","Peripheral Chassis","Storage Chassis","Rack Mount Chassis","Sealed-Case PC","Multi-system Chassis"};
	public final static String[] CIM_VALUEMAP_MULTIPLESYSTEMSUPPORT = {"Unknown","True","False"};
	public final static String[] CIM_VALUEMAP_RACKMOUNTABLE = {"Unknown","True","False"};
	
	
	public final static String CHASSISPACKAGETYPE_UNKNOWN = "0";
	public final static String CHASSISPACKAGETYPE_OTHER = "1";
	public final static String CHASSISPACKAGETYPE_SMBIOSRESERVED = "2";
	public final static String CHASSISPACKAGETYPE_DESKTOP = "3";
	public final static String CHASSISPACKAGETYPE_LOWPROFILEDESKTOP = "4";
	public final static String CHASSISPACKAGETYPE_PIZZABOX = "5";
	public final static String CHASSISPACKAGETYPE_MINITOWER = "6";
	public final static String CHASSISPACKAGETYPE_TOWER = "7";
	public final static String CHASSISPACKAGETYPE_PORTABLE = "8";
	public final static String CHASSISPACKAGETYPE_LAPTOP = "9";
	public final static String CHASSISPACKAGETYPE_NOTEBOOK = "10";
	public final static String CHASSISPACKAGETYPE_HANDHELD = "11";
	public final static String CHASSISPACKAGETYPE_DOCKINGSTATION = "12";
	public final static String CHASSISPACKAGETYPE_ALLINONE = "13";
	public final static String CHASSISPACKAGETYPE_SUBNOTEBOOK = "14";
	public final static String CHASSISPACKAGETYPE_SPACE_SAVING = "15";
	public final static String CHASSISPACKAGETYPE_LUNCHBOX = "16";
	public final static String CHASSISPACKAGETYPE_MAINSYSTEMCHASSIS = "17";
	public final static String CHASSISPACKAGETYPE_EXPANSIONCHASSIS = "18";
	public final static String CHASSISPACKAGETYPE_SUBCHASSIS = "19";
	public final static String CHASSISPACKAGETYPE_BUSEXPANSIONCHASSIS = "20";
	public final static String CHASSISPACKAGETYPE_PERIPHERALCHASSIS = "21";
	public final static String CHASSISPACKAGETYPE_STORAGECHASSIS = "22";
	public final static String CHASSISPACKAGETYPE_SMBIOSRESEVED = "23";
	public final static String CHASSISPACKAGETYPE_SEALED_CASEPC = "24";
	public final static String CHASSISPACKAGETYPE_SMBIOSRESERVED1 = "25";
	public final static String CHASSISPACKAGETYPE_COMPACTPCI = "26";
	public final static String CHASSISPACKAGETYPE_ADVANCEDTCA = "27";
	public final static String CHASSISPACKAGETYPE_BLADEENCLOSURE = "28";
	public final static String CHASSISPACKAGETYPE_DMTFRESERVED = "..";
	public final static String CHASSISPACKAGETYPE_VENDORRESERVED = "0x8000..0xFFFF";
	
	public final static int CHASSISTYPES_OTHER = 1;
	public final static int CHASSISTYPES_UNKNOWN = 2;
	public final static int CHASSISTYPES_DESKTOP = 3;
	public final static int CHASSISTYPES_LOWPROFILEDESKTOP = 4;
	public final static int CHASSISTYPES_PIZZABOX = 5;
	public final static int CHASSISTYPES_MINITOWER = 6;
	public final static int CHASSISTYPES_TOWER = 7;
	public final static int CHASSISTYPES_PORTABLE = 8;
	public final static int CHASSISTYPES_LAPTOP = 9;
	public final static int CHASSISTYPES_NOTEBOOK = 10;
	public final static int CHASSISTYPES_HANDHELD = 11;
	public final static int CHASSISTYPES_DOCKINGSTATION = 12;
	public final static int CHASSISTYPES_ALLINONE = 13;
	public final static int CHASSISTYPES_SUBNOTEBOOK = 14;
	public final static int CHASSISTYPES_SPACE_SAVING = 15;
	public final static int CHASSISTYPES_LUNCHBOX = 16;
	public final static int CHASSISTYPES_MAINSYSTEMCHASSIS = 17;
	public final static int CHASSISTYPES_EXPANSIONCHASSIS = 18;
	public final static int CHASSISTYPES_SUBCHASSIS = 19;
	public final static int CHASSISTYPES_BUSEXPANSIONCHASSIS = 20;
	public final static int CHASSISTYPES_PERIPHERALCHASSIS = 21;
	public final static int CHASSISTYPES_STORAGECHASSIS = 22;
	public final static int CHASSISTYPES_RACKMOUNTCHASSIS = 23;
	public final static int CHASSISTYPES_SEALED_CASEPC = 24;
	public final static int CHASSISTYPES_MULTI_SYSTEMCHASSIS = 25;
	
	public final static int MULTIPLESYSTEMSUPPORT_UNKNOWN = 0;
	public final static int MULTIPLESYSTEMSUPPORT_TRUE = 1;
	public final static int MULTIPLESYSTEMSUPPORT_FALSE = 2;
	
	public final static int RACKMOUNTABLE_UNKNOWN = 0;
	public final static int RACKMOUNTABLE_TRUE = 1;
	public final static int RACKMOUNTABLE_FALSE = 2;
	
	
	
	//**********************************************************************
	// Constructors 	
	//**********************************************************************

	/**
	*	Class constructor
	*/	
	public CIM_Chassis() {

		this.cimInstance	= new CIMInstance();
		
		for (int i = 0; i < CIM_PropertyList.size(); i++) {
			this.cimInstance.addProperty((CIMProperty)((CIMProperty)CIM_PropertyList.get(i)).clone());
		}
		
		this.cimObjectPath 	= new CIMObjectPath(CIM_CLASS_NAME);
		this.cimInstance.setObjectPath(this.cimObjectPath);

		this.original_cimInstance	= (CIMInstance)this.cimInstance.clone();

		setValidCimInstance(false);
	}


	/**
	*	Class constructor
	*/	
	public CIM_Chassis(Vector keyProperties){ 
		this();
		
		if (keyProperties == null) {
			throw new InvalidParameterException("The keyProperties parameter does not contain a valid reference.");
		
		}
		
		Iterator iter = keyProperties.iterator();
		while (iter.hasNext()) {
			Object property = iter.next();
			
			if (property instanceof CIMProperty) {
				CIMProperty keyProperty = (CIMProperty)property;
				this.cimObjectPath.addKey(keyProperty);
				
				if (this.cimInstance.getProperty(keyProperty.getName()) != null) {
					this.cimInstance.removeProperty(keyProperty.getName());
				}
				this.cimInstance.addProperty(keyProperty);
				
			} else {
				throw new InvalidParameterException("The keyProperties parameter should only contain objects of class CIMProperty.");
				
			}
		}
		
		setValidCimInstance(false);
	}

	
	/**
	*	Class constructor
	*/	
	public CIM_Chassis(CIMObjectPath cimObjectPath, CIMInstance cimInstance){ 
		
		if (cimInstance == null) {
			throw new InvalidParameterException("The cimInstance parameter does not contain a valid reference.");
		
		} else if (cimObjectPath == null){
			throw new InvalidParameterException("The cimObjectPath parameter does not contain a valid reference.");		
		
		} else if (!CIM_CLASS_NAME.equals(cimInstance.getClassName())) {
			throw new InvalidParameterException("The class of the cimInstance must be of type " + CIM_CLASS_NAME + ".");
		}
		
		setCimInstance(cimInstance);
		this.original_cimInstance = (CIMInstance)cimInstance.clone();
		this.cimObjectPath        = cimObjectPath;
		setValidCimInstance(true);
	}

	
	/**
	*	The method returns the display name of the class
	*/	
	public String getClassDisplayName(){
		return CIM_CLASS_DISPLAYNAME;
	}
	
	//**********************************************************************
	// Instance methods
	//**********************************************************************

	/**
	*	no description
	*/	
	public boolean isDataValid(Vector invalidProperties) {
		boolean result = true;
		
		if (invalidProperties == null) {
			invalidProperties = new Vector();
		} else {
			invalidProperties.removeAllElements();
		}
		
		return result;
	}
	
	/**
	 * @return Returns the validCimInstance.
	 */
	public boolean isValidCimInstance() {
		return this.validCimInstance;
	}
	
	/**
	 * @param validCimInstance The validCimInstance to set.
	 */
	private void setValidCimInstance(boolean isValidCimInstance) {

		this.validCimInstance = isValidCimInstance;
	}
	
	
	/**
	*	The method returns this CIM instance
	*/
	public CIMInstance getCimInstance() {
		
		return this.cimInstance;
	}
	
	
	/**
	*	The method sets this CIM instance
	*/
	public void setCimInstance(CIMInstance cimInstance) {
		
		this.cimInstance = cimInstance;
	}
	
		
	/**
	*	The method returns this CIM object path
	*/
	public CIMObjectPath getCimObjectPath() {
		return this.cimObjectPath;
	}
	
	
	/**
	*	The method checks if the cimInstance has been modified
	*/
	public boolean isModified() {
	    
	    if (!this.original_cimInstance.equals(this.cimInstance)) 
	        return true;
	    
	    return false;
	}
	
	
	/**
	*	The method resets the values of the cimInstance
	*/	
	public void resetValues() {
	    this.cimInstance = (CIMInstance)this.original_cimInstance.clone();
	}
	
	
	/**
	*	The method checks if the cimInstance equals an other cimInstance
	*/	
	public boolean equals(Object object) {
	    
	    if (!(object instanceof CIM_Chassis)) {
	        return false;
	    }
	    
	    if (this.cimInstance == null && ((CIM_Chassis)object).cimInstance != null) {
	    	return false;
	    	
	    } else if (this.cimInstance != null && ((CIM_Chassis)object).cimInstance == null) {
	    	return false;
	    	
	    } else if (this.cimInstance != null && !this.cimInstance.equals(((CIM_Chassis)object).cimInstance)) {
	    	return false;
	    	
	    } else if (this.original_cimInstance == null && ((CIM_Chassis)object).original_cimInstance != null) {
	    	return false;
	    	
	    } else if (this.original_cimInstance != null && ((CIM_Chassis)object).original_cimInstance == null) {
	    	return false;
	    	
	    } else if (this.original_cimInstance != null && !this.original_cimInstance.equals(((CIM_Chassis)object).original_cimInstance)) {
	        return false;
	        
	    } else if (this.cimObjectPath == null && ((CIM_Chassis)object).cimObjectPath != null) {
	    	return false;
	    	
	    } else if (this.cimObjectPath != null && ((CIM_Chassis)object).cimObjectPath == null) {
	    	return false;
		    	
	    } else if (this.cimObjectPath != null && !this.cimObjectPath.equals(((CIM_Chassis)object).cimObjectPath)) {
	        return false;
	        
	    } 
	    
	    return true;
	}
	
	/**
	*	The method return this method as a string
	*/	
	public String toString() {
		return this.cimInstance.toString();
	}

	//*****************************************************
	// Associators methods
	//*****************************************************
	
	public ArrayList getAssociated_CIM_Rack_CIM_ChassisInRacks(CIMClient cimClient,
	boolean includeQualifiers, boolean includeClassOrigin, java.lang.String[] propertyList){

		if (cimClient == null) {
			throw new InvalidParameterException("The cimClient parameter does not contain a valid reference.");
		}
		
		ArrayList resultArrayList = new ArrayList();
		Enumeration enumeration = null;
		
		try {
			enumeration = cimClient.associators(
					this.getCimObjectPath(),
					CIM_ASSOCIATOR_CLASS_NAME_CIM_CHASSISINRACK, 
					CIM_Rack.CIM_CLASS_NAME, 
					"PartComponent", //$NON-NLS-1$
					"GroupComponent", //$NON-NLS-1$
					includeQualifiers,
					includeClassOrigin,
					propertyList);
		
			while (enumeration.hasMoreElements()) {
				Object obj = enumeration.nextElement();
				if (obj instanceof CIMInstance) {
					CIMInstance cimInstance = (CIMInstance)obj;
					Class clazz = null;
					String cimClassName = cimInstance.getClassName();
				
					for (int i = 0; clazz == null && i < CIM_Chassis.Java_Package_List.size(); i++) {
						if (!((String)(CIM_Chassis.Java_Package_List.get(i))).trim().equals("") && //$NON-NLS-1$
								!((String)(CIM_Chassis.Java_Package_List.get(i))).endsWith(".")) { //$NON-NLS-1$
							CIM_Chassis.Java_Package_List.setElementAt((String)(CIM_Chassis.Java_Package_List.get(i)) + ("."), i); //$NON-NLS-1$
						}
						cimClassName = (CIM_Chassis.Java_Package_List.get(i)) + cimClassName;

						try {
							clazz = Class.forName(cimClassName);
						} catch(ClassNotFoundException e) {
						}
					}
					
					if (clazz == null) {
						System.err.println("The class " + cimInstance.getClassName() +" was not found. Constructing instance of the base class.");
						resultArrayList.add(new CIM_Rack(cimInstance.getObjectPath(), cimInstance));
						continue;
					}
					
					Class[] constParams = new Class[2];
					constParams[0] = CIMObjectPath.class;
					constParams[1] = CIMInstance.class;
					Constructor cons = null;
					try {
						cons = clazz.getConstructor(constParams);
						
					} catch(NoSuchMethodException e) {
						System.err.println("The required constructor of class " + cimInstance.getClassName() + " could not be found. Constructing instance of the base class.");
						resultArrayList.add(new CIM_Rack(cimInstance.getObjectPath(), cimInstance));
						continue;
					}
				
					try {
						Object[] actargs = new Object[] {cimInstance.getObjectPath(), cimInstance};
					
						Object dataObj = cons.newInstance(actargs);
					
						resultArrayList.add(dataObj);
					} catch (Exception e) {
						System.err.println("The instance of class " + cimInstance.getClassName() + " could not be created successful. Constructing instance of the base class.");
						resultArrayList.add(new CIM_Rack(cimInstance.getObjectPath(), cimInstance));
						continue;
					}

				}
			}
		} finally {
			try {
				if (enumeration != null) {
					((CIMEnumeration)enumeration).close();
				}
			} catch(Exception e) {
				throw new CIMException(CIMException.CIM_ERR_FAILED, "The socket of the result could not be closed properly.");
			}
		}
			
		return resultArrayList;
	}

	public ArrayList getAssociated_CIM_Rack_CIM_ChassisInRack_Names(CIMClient cimClient, boolean deep) {

		if (cimClient == null) {
			throw new InvalidParameterException("The cimClient parameter does not contain a valid reference.");
		}
		
		Enumeration enumeration = null;
		ArrayList resultArrayList = new ArrayList();

		try {		
			enumeration = cimClient.associatorNames(
					this.getCimObjectPath(),
					CIM_ASSOCIATOR_CLASS_NAME_CIM_CHASSISINRACK, 
					CIM_Rack.CIM_CLASS_NAME, 
					"PartComponent", //$NON-NLS-1$
					"GroupComponent"); //$NON-NLS-1$
		
		
			while (enumeration.hasMoreElements()) {
				Object obj = enumeration.nextElement();
			
				if (obj instanceof CIMObjectPath) {
					if (deep || ((CIMObjectPath)obj).getObjectName().equals(CIM_Rack.CIM_CLASS_NAME)) {
						resultArrayList.add(obj);
					}
				}
			}
		} finally {
			try {
				if (enumeration != null) {
					((CIMEnumeration)enumeration).close();
				}
			} catch(Exception e) {
				throw new CIMException(CIMException.CIM_ERR_FAILED, "The socket of the result could not be closed properly.");
			}
		}
			
		return resultArrayList;
	}

	public ArrayList getAssociated_CIM_Chassis_CIM_Dockeds(CIMClient cimClient,
	boolean includeQualifiers, boolean includeClassOrigin, java.lang.String[] propertyList){

		if (cimClient == null) {
			throw new InvalidParameterException("The cimClient parameter does not contain a valid reference.");
		}
		
		ArrayList resultArrayList = new ArrayList();
		Enumeration enumeration = null;
		
		try {
			enumeration = cimClient.associators(
					this.getCimObjectPath(),
					CIM_ASSOCIATOR_CLASS_NAME_CIM_DOCKED, 
					CIM_Chassis.CIM_CLASS_NAME, 
					"Antecedent", //$NON-NLS-1$
					"Dependent", //$NON-NLS-1$
					includeQualifiers,
					includeClassOrigin,
					propertyList);
		
			while (enumeration.hasMoreElements()) {
				Object obj = enumeration.nextElement();
				if (obj instanceof CIMInstance) {
					CIMInstance cimInstance = (CIMInstance)obj;
					Class clazz = null;
					String cimClassName = cimInstance.getClassName();
				
					for (int i = 0; clazz == null && i < CIM_Chassis.Java_Package_List.size(); i++) {
						if (!((String)(CIM_Chassis.Java_Package_List.get(i))).trim().equals("") && //$NON-NLS-1$
								!((String)(CIM_Chassis.Java_Package_List.get(i))).endsWith(".")) { //$NON-NLS-1$
							CIM_Chassis.Java_Package_List.setElementAt((String)(CIM_Chassis.Java_Package_List.get(i)) + ("."), i); //$NON-NLS-1$
						}
						cimClassName = (CIM_Chassis.Java_Package_List.get(i)) + cimClassName;

						try {
							clazz = Class.forName(cimClassName);
						} catch(ClassNotFoundException e) {
						}
					}
					
					if (clazz == null) {
						System.err.println("The class " + cimInstance.getClassName() +" was not found. Constructing instance of the base class.");
						resultArrayList.add(new CIM_Chassis(cimInstance.getObjectPath(), cimInstance));
						continue;
					}
					
					Class[] constParams = new Class[2];
					constParams[0] = CIMObjectPath.class;
					constParams[1] = CIMInstance.class;
					Constructor cons = null;
					try {
						cons = clazz.getConstructor(constParams);
						
					} catch(NoSuchMethodException e) {
						System.err.println("The required constructor of class " + cimInstance.getClassName() + " could not be found. Constructing instance of the base class.");
						resultArrayList.add(new CIM_Chassis(cimInstance.getObjectPath(), cimInstance));
						continue;
					}
				
					try {
						Object[] actargs = new Object[] {cimInstance.getObjectPath(), cimInstance};
					
						Object dataObj = cons.newInstance(actargs);
					
						resultArrayList.add(dataObj);
					} catch (Exception e) {
						System.err.println("The instance of class " + cimInstance.getClassName() + " could not be created successful. Constructing instance of the base class.");
						resultArrayList.add(new CIM_Chassis(cimInstance.getObjectPath(), cimInstance));
						continue;
					}

				}
			}
		} finally {
			try {
				if (enumeration != null) {
					((CIMEnumeration)enumeration).close();
				}
			} catch(Exception e) {
				throw new CIMException(CIMException.CIM_ERR_FAILED, "The socket of the result could not be closed properly.");
			}
		}
			
		return resultArrayList;
	}

	public ArrayList getAssociated_CIM_Chassis_CIM_Docked_Names(CIMClient cimClient, boolean deep) {

		if (cimClient == null) {
			throw new InvalidParameterException("The cimClient parameter does not contain a valid reference.");
		}
		
		Enumeration enumeration = null;
		ArrayList resultArrayList = new ArrayList();

		try {		
			enumeration = cimClient.associatorNames(
					this.getCimObjectPath(),
					CIM_ASSOCIATOR_CLASS_NAME_CIM_DOCKED, 
					CIM_Chassis.CIM_CLASS_NAME, 
					"Antecedent", //$NON-NLS-1$
					"Dependent"); //$NON-NLS-1$
		
		
			while (enumeration.hasMoreElements()) {
				Object obj = enumeration.nextElement();
			
				if (obj instanceof CIMObjectPath) {
					if (deep || ((CIMObjectPath)obj).getObjectName().equals(CIM_Chassis.CIM_CLASS_NAME)) {
						resultArrayList.add(obj);
					}
				}
			}
		} finally {
			try {
				if (enumeration != null) {
					((CIMEnumeration)enumeration).close();
				}
			} catch(Exception e) {
				throw new CIMException(CIMException.CIM_ERR_FAILED, "The socket of the result could not be closed properly.");
			}
		}
			
		return resultArrayList;
	}

	public ArrayList getAssociated_CIM_PhysicalPackage_CIM_PackageInChassiss(CIMClient cimClient,
	boolean includeQualifiers, boolean includeClassOrigin, java.lang.String[] propertyList){

		if (cimClient == null) {
			throw new InvalidParameterException("The cimClient parameter does not contain a valid reference.");
		}
		
		ArrayList resultArrayList = new ArrayList();
		Enumeration enumeration = null;
		
		try {
			enumeration = cimClient.associators(
					this.getCimObjectPath(),
					CIM_ASSOCIATOR_CLASS_NAME_CIM_PACKAGEINCHASSIS, 
					CIM_PhysicalPackage.CIM_CLASS_NAME, 
					"GroupComponent", //$NON-NLS-1$
					"PartComponent", //$NON-NLS-1$
					includeQualifiers,
					includeClassOrigin,
					propertyList);
		
			while (enumeration.hasMoreElements()) {
				Object obj = enumeration.nextElement();
				if (obj instanceof CIMInstance) {
					CIMInstance cimInstance = (CIMInstance)obj;
					Class clazz = null;
					String cimClassName = cimInstance.getClassName();
				
					for (int i = 0; clazz == null && i < CIM_Chassis.Java_Package_List.size(); i++) {
						if (!((String)(CIM_Chassis.Java_Package_List.get(i))).trim().equals("") && //$NON-NLS-1$
								!((String)(CIM_Chassis.Java_Package_List.get(i))).endsWith(".")) { //$NON-NLS-1$
							CIM_Chassis.Java_Package_List.setElementAt((String)(CIM_Chassis.Java_Package_List.get(i)) + ("."), i); //$NON-NLS-1$
						}
						cimClassName = (CIM_Chassis.Java_Package_List.get(i)) + cimClassName;

						try {
							clazz = Class.forName(cimClassName);
						} catch(ClassNotFoundException e) {
						}
					}
					
					if (clazz == null) {
						System.err.println("The class " + cimInstance.getClassName() +" was not found. Constructing instance of the base class.");
						resultArrayList.add(new CIM_PhysicalPackage(cimInstance.getObjectPath(), cimInstance));
						continue;
					}
					
					Class[] constParams = new Class[2];
					constParams[0] = CIMObjectPath.class;
					constParams[1] = CIMInstance.class;
					Constructor cons = null;
					try {
						cons = clazz.getConstructor(constParams);
						
					} catch(NoSuchMethodException e) {
						System.err.println("The required constructor of class " + cimInstance.getClassName() + " could not be found. Constructing instance of the base class.");
						resultArrayList.add(new CIM_PhysicalPackage(cimInstance.getObjectPath(), cimInstance));
						continue;
					}
				
					try {
						Object[] actargs = new Object[] {cimInstance.getObjectPath(), cimInstance};
					
						Object dataObj = cons.newInstance(actargs);
					
						resultArrayList.add(dataObj);
					} catch (Exception e) {
						System.err.println("The instance of class " + cimInstance.getClassName() + " could not be created successful. Constructing instance of the base class.");
						resultArrayList.add(new CIM_PhysicalPackage(cimInstance.getObjectPath(), cimInstance));
						continue;
					}

				}
			}
		} finally {
			try {
				if (enumeration != null) {
					((CIMEnumeration)enumeration).close();
				}
			} catch(Exception e) {
				throw new CIMException(CIMException.CIM_ERR_FAILED, "The socket of the result could not be closed properly.");
			}
		}
			
		return resultArrayList;
	}

	public ArrayList getAssociated_CIM_PhysicalPackage_CIM_PackageInChassis_Names(CIMClient cimClient, boolean deep) {

		if (cimClient == null) {
			throw new InvalidParameterException("The cimClient parameter does not contain a valid reference.");
		}
		
		Enumeration enumeration = null;
		ArrayList resultArrayList = new ArrayList();

		try {		
			enumeration = cimClient.associatorNames(
					this.getCimObjectPath(),
					CIM_ASSOCIATOR_CLASS_NAME_CIM_PACKAGEINCHASSIS, 
					CIM_PhysicalPackage.CIM_CLASS_NAME, 
					"GroupComponent", //$NON-NLS-1$
					"PartComponent"); //$NON-NLS-1$
		
		
			while (enumeration.hasMoreElements()) {
				Object obj = enumeration.nextElement();
			
				if (obj instanceof CIMObjectPath) {
					if (deep || ((CIMObjectPath)obj).getObjectName().equals(CIM_PhysicalPackage.CIM_CLASS_NAME)) {
						resultArrayList.add(obj);
					}
				}
			}
		} finally {
			try {
				if (enumeration != null) {
					((CIMEnumeration)enumeration).close();
				}
			} catch(Exception e) {
				throw new CIMException(CIMException.CIM_ERR_FAILED, "The socket of the result could not be closed properly.");
			}
		}
			
		return resultArrayList;
	}

	
	
	//*****************************************************
	// Attribute methods
	//*****************************************************
	
	// Attribute ChassisPackageType
	
	public UnsignedInt16 get_ChassisPackageType() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_CHASSISPACKAGETYPE);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISPACKAGETYPE + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISPACKAGETYPE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (UnsignedInt16)currentProperty.getValue().getValue();
	}
	    
			
	public void set_ChassisPackageType(UnsignedInt16 newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_CHASSISPACKAGETYPE);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISPACKAGETYPE + " could not be found");
    		
		} else if (!CIM_ChassisHelper.isValid_ChassisPackageType(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_Chassis.CIM_PROPERTY_CHASSISPACKAGETYPE);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISPACKAGETYPE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.UINT16));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute ChassisTypeDescription
	
	public String get_ChassisTypeDescription() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_CHASSISTYPEDESCRIPTION);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISTYPEDESCRIPTION + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISTYPEDESCRIPTION + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (String)currentProperty.getValue().getValue();
	}
	    
			
	public void set_ChassisTypeDescription(String newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_CHASSISTYPEDESCRIPTION);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISTYPEDESCRIPTION + " could not be found");
    		
		} else if (!CIM_ChassisHelper.isValid_ChassisTypeDescription(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_Chassis.CIM_PROPERTY_CHASSISTYPEDESCRIPTION);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISTYPEDESCRIPTION + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.STRING));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute ChassisTypes
	
	public UnsignedInt16[] get_ChassisTypes() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_CHASSISTYPES);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISTYPES + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16_ARRAY) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISTYPES + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16_ARRAY) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		Vector returnedVector = (Vector)currentProperty.getValue().getValue();
		
		UnsignedInt16[] resultArray = new UnsignedInt16[returnedVector!=null?returnedVector.size():0];
		for (int i = 0; i < resultArray.length; i++) {
			resultArray[i] = (UnsignedInt16)returnedVector.get(i);
		}
		
		return resultArray;
	}
	    
			
	public void set_ChassisTypes(UnsignedInt16[] newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_CHASSISTYPES);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISTYPES + " could not be found");
    		
		} else if (!CIM_ChassisHelper.isValid_ChassisTypes(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_Chassis.CIM_PROPERTY_CHASSISTYPES);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16_ARRAY) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_CHASSISTYPES + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16_ARRAY) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.UINT16_ARRAY));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute CurrentRequiredOrProduced
	
	public Short get_CurrentRequiredOrProduced() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_CURRENTREQUIREDORPRODUCED);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_CURRENTREQUIREDORPRODUCED + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.SINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_CURRENTREQUIREDORPRODUCED + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.SINT16) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (Short)currentProperty.getValue().getValue();
	}
	    
			
	public void set_CurrentRequiredOrProduced(Short newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_CURRENTREQUIREDORPRODUCED);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_CURRENTREQUIREDORPRODUCED + " could not be found");
    		
		} else if (!CIM_ChassisHelper.isValid_CurrentRequiredOrProduced(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_Chassis.CIM_PROPERTY_CURRENTREQUIREDORPRODUCED);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.SINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_CURRENTREQUIREDORPRODUCED + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.SINT16) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.SINT16));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute HeatGeneration
	
	public UnsignedInt16 get_HeatGeneration() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_HEATGENERATION);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_HEATGENERATION + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_HEATGENERATION + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (UnsignedInt16)currentProperty.getValue().getValue();
	}
	    
			
	public void set_HeatGeneration(UnsignedInt16 newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_HEATGENERATION);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_HEATGENERATION + " could not be found");
    		
		} else if (!CIM_ChassisHelper.isValid_HeatGeneration(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_Chassis.CIM_PROPERTY_HEATGENERATION);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_HEATGENERATION + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.UINT16));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute MultipleSystemSupport
	
	public UnsignedInt16 get_MultipleSystemSupport() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_MULTIPLESYSTEMSUPPORT);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_MULTIPLESYSTEMSUPPORT + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_MULTIPLESYSTEMSUPPORT + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (UnsignedInt16)currentProperty.getValue().getValue();
	}
	    
			
	public void set_MultipleSystemSupport(UnsignedInt16 newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_MULTIPLESYSTEMSUPPORT);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_MULTIPLESYSTEMSUPPORT + " could not be found");
    		
		} else if (!CIM_ChassisHelper.isValid_MultipleSystemSupport(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_Chassis.CIM_PROPERTY_MULTIPLESYSTEMSUPPORT);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_MULTIPLESYSTEMSUPPORT + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.UINT16));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute NumberOfPowerCords
	
	public UnsignedInt16 get_NumberOfPowerCords() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_NUMBEROFPOWERCORDS);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_NUMBEROFPOWERCORDS + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_NUMBEROFPOWERCORDS + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (UnsignedInt16)currentProperty.getValue().getValue();
	}
	    
			
	public void set_NumberOfPowerCords(UnsignedInt16 newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_NUMBEROFPOWERCORDS);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_NUMBEROFPOWERCORDS + " could not be found");
    		
		} else if (!CIM_ChassisHelper.isValid_NumberOfPowerCords(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_Chassis.CIM_PROPERTY_NUMBEROFPOWERCORDS);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_NUMBEROFPOWERCORDS + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.UINT16));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute RackMountable
	
	public UnsignedInt16 get_RackMountable() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_RACKMOUNTABLE);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_RACKMOUNTABLE + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_RACKMOUNTABLE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (UnsignedInt16)currentProperty.getValue().getValue();
	}
	    
			
	public void set_RackMountable(UnsignedInt16 newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_RACKMOUNTABLE);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_RACKMOUNTABLE + " could not be found");
    		
		} else if (!CIM_ChassisHelper.isValid_RackMountable(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_Chassis.CIM_PROPERTY_RACKMOUNTABLE);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_RACKMOUNTABLE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.UINT16));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute TypeDescriptions
	
	public String[] get_TypeDescriptions() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_TYPEDESCRIPTIONS);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_TYPEDESCRIPTIONS + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING_ARRAY) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_TYPEDESCRIPTIONS + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING_ARRAY) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		Vector returnedVector = (Vector)currentProperty.getValue().getValue();
		
		String[] resultArray = new String[returnedVector!=null?returnedVector.size():0];
		for (int i = 0; i < resultArray.length; i++) {
			resultArray[i] = (String)returnedVector.get(i);
		}
		
		return resultArray;
	}
	    
			
	public void set_TypeDescriptions(String[] newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_Chassis.CIM_PROPERTY_TYPEDESCRIPTIONS);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_Chassis.CIM_PROPERTY_TYPEDESCRIPTIONS + " could not be found");
    		
		} else if (!CIM_ChassisHelper.isValid_TypeDescriptions(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_Chassis.CIM_PROPERTY_TYPEDESCRIPTIONS);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING_ARRAY) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_Chassis.CIM_PROPERTY_TYPEDESCRIPTIONS + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING_ARRAY) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.STRING_ARRAY));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	
	
	//*****************************************************
	// Invoke methods
	//*****************************************************
	
	

}
