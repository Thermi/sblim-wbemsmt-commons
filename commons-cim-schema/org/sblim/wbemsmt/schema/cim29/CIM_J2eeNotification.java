/** 
 * CIM_J2eeNotification.java
 *
 * © Copyright IBM Corp. 2005
 *
 * THIS FILE IS PROVIDED UNDER THE TERMS OF THE COMMON PUBLIC LICENSE
 * ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS FILE
 * CONSTITUTES RECIPIENTS ACCEPTANCE OF THE AGREEMENT.
 *
 * You can obtain a current copy of the Common Public License from
 * http://www.opensource.org/licenses/cpl1.0.php
 *
 * @author:	ECCG 0.9.7 generated 
 * 			(author should be changed, e.g. First and Last Name <xxx@cc.ibm.com>)
 *
 * Contributors:
 *
 *
 * Description: The J2eeNotification class specifies the properties that must be included in every event that is generated by a J2EE managed object that supports the event model. All management systems that support event notification must support all of the properties in this class.
 * 
 */

package org.sblim.wbemsmt.schema.cim29;

import java.security.InvalidParameterException;
import java.util.Vector;
import java.util.Iterator;
import org.sblim.wbem.cim.*;


public class CIM_J2eeNotification extends CIM_ProcessIndication  {
	
	public final static String CIM_CLASS_NAME = "CIM_J2eeNotification";
	public final static String CIM_CLASS_DISPLAYNAME = CIM_CLASS_NAME;

	private boolean validCimInstance = false;
	
	public final static String CIM_CLASS_VERSION = "2.8.0";
	
	
	/**
	*	The identifier for the indication, represented as the name of the source J2EE managed object that generated the event. The name MUST be constructed using the form specified in JSR77.3.1.1.1.
	*/
	public final static String CIM_PROPERTY_INDICATIONIDENTIFIER = "IndicationIdentifier"; //$NON-NLS-1$
	/**
	*	The type of the indication. The type is assigned by the source object that generated the indication. It conveys the semantic meaning of the particular indication. The standard types (starting, stopping, running, etc.) MUST be described by this property's enumeration. Other values MAY also be specified by entering 1 ("Other") in this property and placing the type's string value in OtherIndicationType. The latter SHOULD be interpreted as a number of dot-separated components. This allows some structure in the naming of indication types. Source objects are free to define any types that they wish to use when naming the indications that they generate. 

Note that this enumeration is defined by examining J2eeManagedObject's OperationalStatus property, by the creation or deletion of the J2eeManagedObject instance, or is the decision of the JSR77 experts or the implementation. It is not a one-to-one mapping of the OperationalStatus property in ManagedSystemElement, and is therefore a unique enumeration and specific ProcessIndication.
	*/
	public final static String CIM_PROPERTY_INDICATIONTYPE = "IndicationType"; //$NON-NLS-1$
	/**
	*	An informational message about the indication.
	*/
	public final static String CIM_PROPERTY_MESSAGE = "Message"; //$NON-NLS-1$
	/**
	*	The type of the indication when a non-standard event is generated by the source object. This value MUST be specified when IndicationType is set to 1 ("Other").
	*/
	public final static String CIM_PROPERTY_OTHERINDICATIONTYPE = "OtherIndicationType"; //$NON-NLS-1$
	/**
	*	The sequence number of the indication. Identifies the position of the indication in a stream of indications. The sequence number provides a means of determining the order of sequential indications that occurred with the same timestamp (within the minimum supported unit of time).
	*/
	public final static String CIM_PROPERTY_SEQUENCENUMBER = "SequenceNumber"; //$NON-NLS-1$
	/**
	*	Optional data that the notication broadcaster wishes to communicate to listeners. The content of the data is user specific. The UserData property may be null.
	*/
	public final static String CIM_PROPERTY_USERDATA = "UserData"; //$NON-NLS-1$
	
	
	

	public static Vector CIM_PropertyNameList	= new Vector();
	public static Vector CIM_PropertyList 		= new Vector();
	public static Vector Java_Package_List 		= new Vector();
	
	static {
		CIM_PropertyNameList.add(CIM_PROPERTY_INDICATIONIDENTIFIER);
		CIM_PropertyNameList.add(CIM_PROPERTY_INDICATIONTYPE);
		CIM_PropertyNameList.add(CIM_PROPERTY_MESSAGE);
		CIM_PropertyNameList.add(CIM_PROPERTY_OTHERINDICATIONTYPE);
		CIM_PropertyNameList.add(CIM_PROPERTY_SEQUENCENUMBER);
		CIM_PropertyNameList.add(CIM_PROPERTY_USERDATA);
				
		for (int i = 0; i < CIM_ProcessIndication.CIM_PropertyNameList.size(); i++) {
			if (((String)CIM_ProcessIndication.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_INDICATIONIDENTIFIER)||
				((String)CIM_ProcessIndication.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_INDICATIONTYPE)||
				((String)CIM_ProcessIndication.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_MESSAGE)||
				((String)CIM_ProcessIndication.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_OTHERINDICATIONTYPE)||
				((String)CIM_ProcessIndication.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_SEQUENCENUMBER)||
				((String)CIM_ProcessIndication.CIM_PropertyNameList.elementAt(i)).equals(CIM_PROPERTY_USERDATA)){
				continue;
			}
			
			CIM_J2eeNotification.CIM_PropertyNameList.add(CIM_ProcessIndication.CIM_PropertyNameList.elementAt(i));
		}
		
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_INDICATIONIDENTIFIER, new CIMValue(null, new CIMDataType(CIMDataType.STRING))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_INDICATIONTYPE, new CIMValue(null, new CIMDataType(CIMDataType.UINT16))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_MESSAGE, new CIMValue(null, new CIMDataType(CIMDataType.STRING))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_OTHERINDICATIONTYPE, new CIMValue(null, new CIMDataType(CIMDataType.STRING))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_SEQUENCENUMBER, new CIMValue(null, new CIMDataType(CIMDataType.SINT64))));
		CIM_PropertyList.add(new CIMProperty(CIM_PROPERTY_USERDATA, new CIMValue(null, new CIMDataType(CIMDataType.STRING))));
				
		for (int i = 0; i < CIM_ProcessIndication.CIM_PropertyList.size(); i++) {
			if (((CIMProperty)CIM_ProcessIndication.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_INDICATIONIDENTIFIER)||
				((CIMProperty)CIM_ProcessIndication.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_INDICATIONTYPE)||
				((CIMProperty)CIM_ProcessIndication.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_MESSAGE)||
				((CIMProperty)CIM_ProcessIndication.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_OTHERINDICATIONTYPE)||
				((CIMProperty)CIM_ProcessIndication.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_SEQUENCENUMBER)||
				((CIMProperty)CIM_ProcessIndication.CIM_PropertyList.get(i)).getName().equals(CIM_PROPERTY_USERDATA)){
				continue;
			}
			
			CIM_J2eeNotification.CIM_PropertyList.add(CIM_ProcessIndication.CIM_PropertyList.elementAt(i));
		}
		
		Java_Package_List.add("org.sblim.wbemsmt.schema.cim29");
				
		for (int i = 0; i < CIM_ProcessIndication.Java_Package_List.size(); i++) {
			if (((String)CIM_ProcessIndication.Java_Package_List.elementAt(i)).equals("org.sblim.wbemsmt.schema.cim29")){
				continue;
			}
			
			Java_Package_List.add(CIM_ProcessIndication.Java_Package_List.elementAt(i));
		}
	};
			
	public final static String[] CIM_VALUEMAP_INDICATIONTYPE = {"Unknown","Other","j2ee.object.created","j2ee.object.deleted","j2ee.state.starting","j2ee.state.running","j2ee.state.stopping","j2ee.state.stopped","j2ee.state.failed"};
	
	
	public final static int INDICATIONTYPE_UNKNOWN = 0;
	public final static int INDICATIONTYPE_OTHER = 1;
	public final static int INDICATIONTYPE_J2EE_OBJECT_CREATED = 2;
	public final static int INDICATIONTYPE_J2EE_OBJECT_DELETED = 3;
	public final static int INDICATIONTYPE_J2EE_STATE_STARTING = 4;
	public final static int INDICATIONTYPE_J2EE_STATE_RUNNING = 5;
	public final static int INDICATIONTYPE_J2EE_STATE_STOPPING = 6;
	public final static int INDICATIONTYPE_J2EE_STATE_STOPPED = 7;
	public final static int INDICATIONTYPE_J2EE_STATE_FAILED = 8;
	
	
	
	//**********************************************************************
	// Constructors 	
	//**********************************************************************

	/**
	*	Class constructor
	*/	
	public CIM_J2eeNotification() {

		this.cimInstance	= new CIMInstance();
		
		for (int i = 0; i < CIM_PropertyList.size(); i++) {
			this.cimInstance.addProperty((CIMProperty)((CIMProperty)CIM_PropertyList.get(i)).clone());
		}
		
		this.cimObjectPath 	= new CIMObjectPath(CIM_CLASS_NAME);
		this.cimInstance.setObjectPath(this.cimObjectPath);

		this.original_cimInstance	= (CIMInstance)this.cimInstance.clone();

		setValidCimInstance(false);
	}


	/**
	*	Class constructor
	*/	
	public CIM_J2eeNotification(Vector keyProperties){ 
		this();
		
		if (keyProperties == null) {
			throw new InvalidParameterException("The keyProperties parameter does not contain a valid reference.");
		
		}
		
		Iterator iter = keyProperties.iterator();
		while (iter.hasNext()) {
			Object property = iter.next();
			
			if (property instanceof CIMProperty) {
				CIMProperty keyProperty = (CIMProperty)property;
				this.cimObjectPath.addKey(keyProperty);
				
				if (this.cimInstance.getProperty(keyProperty.getName()) != null) {
					this.cimInstance.removeProperty(keyProperty.getName());
				}
				this.cimInstance.addProperty(keyProperty);
				
			} else {
				throw new InvalidParameterException("The keyProperties parameter should only contain objects of class CIMProperty.");
				
			}
		}
		
		setValidCimInstance(false);
	}

	
	/**
	*	Class constructor
	*/	
	public CIM_J2eeNotification(CIMObjectPath cimObjectPath, CIMInstance cimInstance){ 
		
		if (cimInstance == null) {
			throw new InvalidParameterException("The cimInstance parameter does not contain a valid reference.");
		
		} else if (cimObjectPath == null){
			throw new InvalidParameterException("The cimObjectPath parameter does not contain a valid reference.");		
		
		} else if (!CIM_CLASS_NAME.equals(cimInstance.getClassName())) {
			throw new InvalidParameterException("The class of the cimInstance must be of type " + CIM_CLASS_NAME + ".");
		}
		
		setCimInstance(cimInstance);
		this.original_cimInstance = (CIMInstance)cimInstance.clone();
		this.cimObjectPath        = cimObjectPath;
		setValidCimInstance(true);
	}

	
	/**
	*	The method returns the display name of the class
	*/	
	public String getClassDisplayName(){
		return CIM_CLASS_DISPLAYNAME;
	}
	
	//**********************************************************************
	// Instance methods
	//**********************************************************************

	/**
	*	no description
	*/	
	public boolean isDataValid(Vector invalidProperties) {
		boolean result = true;
		
		if (invalidProperties == null) {
			invalidProperties = new Vector();
		} else {
			invalidProperties.removeAllElements();
		}
		
		return result;
	}
	
	/**
	 * @return Returns the validCimInstance.
	 */
	public boolean isValidCimInstance() {
		return validCimInstance;
	}
	
	/**
	 * @param validCimInstance The validCimInstance to set.
	 */
	private void setValidCimInstance(boolean isValidCimInstance) {

		this.validCimInstance = isValidCimInstance;
	}
	
	
	/**
	*	The method returns this CIM instance
	*/
	public CIMInstance getCimInstance() {
		
		return this.cimInstance;
	}
	
	
	/**
	*	The method sets this CIM instance
	*/
	public void setCimInstance(CIMInstance cimInstance) {
		
		this.cimInstance = cimInstance;
	}
	
		
	/**
	*	The method returns this CIM object path
	*/
	public CIMObjectPath getCimObjectPath() {
		return this.cimObjectPath;
	}
	
	
	/**
	*	The method checks if the cimInstance has been modified
	*/
	public boolean isModified() {
	    
	    if (!this.original_cimInstance.equals(this.cimInstance)) 
	        return true;
	    
	    return false;
	}
	
	
	/**
	*	The method resets the values of the cimInstance
	*/	
	public void resetValues() {
	    this.cimInstance = (CIMInstance)this.original_cimInstance.clone();
	}
	
	
	/**
	*	The method checks if the cimInstance equals an other cimInstance
	*/	
	public boolean equals(Object object) {
	    
	    if (!(object instanceof CIM_J2eeNotification)) {
	        return false;
	    }
	    
	    if (this.cimInstance == null && ((CIM_J2eeNotification)object).cimInstance != null) {
	    	return false;
	    	
	    } else if (this.cimInstance != null && ((CIM_J2eeNotification)object).cimInstance == null) {
	    	return false;
	    	
	    } else if (this.cimInstance != null && !this.cimInstance.equals(((CIM_J2eeNotification)object).cimInstance)) {
	    	return false;
	    	
	    } else if (this.original_cimInstance == null && ((CIM_J2eeNotification)object).original_cimInstance != null) {
	    	return false;
	    	
	    } else if (this.original_cimInstance != null && ((CIM_J2eeNotification)object).original_cimInstance == null) {
	    	return false;
	    	
	    } else if (this.original_cimInstance != null && !this.original_cimInstance.equals(((CIM_J2eeNotification)object).original_cimInstance)) {
	        return false;
	        
	    } else if (this.cimObjectPath == null && ((CIM_J2eeNotification)object).cimObjectPath != null) {
	    	return false;
	    	
	    } else if (this.cimObjectPath != null && ((CIM_J2eeNotification)object).cimObjectPath == null) {
	    	return false;
		    	
	    } else if (this.cimObjectPath != null && !this.cimObjectPath.equals(((CIM_J2eeNotification)object).cimObjectPath)) {
	        return false;
	        
	    } 
	    
	    return true;
	}
	
	/**
	*	The method return this method as a string
	*/	
	public String toString() {
		return this.cimInstance.toString();
	}

	//*****************************************************
	// Associators methods
	//*****************************************************
	
	
	
	//*****************************************************
	// Attribute methods
	//*****************************************************
	
	// Attribute IndicationIdentifier
	
	public String get_IndicationIdentifier() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_INDICATIONIDENTIFIER);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_INDICATIONIDENTIFIER + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_INDICATIONIDENTIFIER + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (String)currentProperty.getValue().getValue();
	}
	    
			
	public void set_IndicationIdentifier(String newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_INDICATIONIDENTIFIER);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_INDICATIONIDENTIFIER + " could not be found");
    		
		} else if (!CIM_J2eeNotificationHelper.isValid_IndicationIdentifier(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_J2eeNotification.CIM_PROPERTY_INDICATIONIDENTIFIER);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_INDICATIONIDENTIFIER + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.STRING));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute IndicationType
	
	public UnsignedInt16 get_IndicationType() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_INDICATIONTYPE);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_INDICATIONTYPE + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_INDICATIONTYPE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (UnsignedInt16)currentProperty.getValue().getValue();
	}
	    
			
	public void set_IndicationType(UnsignedInt16 newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_INDICATIONTYPE);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_INDICATIONTYPE + " could not be found");
    		
		} else if (!CIM_J2eeNotificationHelper.isValid_IndicationType(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_J2eeNotification.CIM_PROPERTY_INDICATIONTYPE);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.UINT16) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_INDICATIONTYPE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.UINT16) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.UINT16));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute Message
	
	public String get_Message() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_MESSAGE);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_MESSAGE + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_MESSAGE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (String)currentProperty.getValue().getValue();
	}
	    
			
	public void set_Message(String newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_MESSAGE);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_MESSAGE + " could not be found");
    		
		} else if (!CIM_J2eeNotificationHelper.isValid_Message(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_J2eeNotification.CIM_PROPERTY_MESSAGE);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_MESSAGE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.STRING));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute OtherIndicationType
	
	public String get_OtherIndicationType() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_OTHERINDICATIONTYPE);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_OTHERINDICATIONTYPE + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_OTHERINDICATIONTYPE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (String)currentProperty.getValue().getValue();
	}
	    
			
	public void set_OtherIndicationType(String newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_OTHERINDICATIONTYPE);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_OTHERINDICATIONTYPE + " could not be found");
    		
		} else if (!CIM_J2eeNotificationHelper.isValid_OtherIndicationType(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_J2eeNotification.CIM_PROPERTY_OTHERINDICATIONTYPE);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_OTHERINDICATIONTYPE + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.STRING));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute SequenceNumber
	
	public Long get_SequenceNumber() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_SEQUENCENUMBER);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_SEQUENCENUMBER + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.SINT64) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_SEQUENCENUMBER + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.SINT64) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (Long)currentProperty.getValue().getValue();
	}
	    
			
	public void set_SequenceNumber(Long newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_SEQUENCENUMBER);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_SEQUENCENUMBER + " could not be found");
    		
		} else if (!CIM_J2eeNotificationHelper.isValid_SequenceNumber(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_J2eeNotification.CIM_PROPERTY_SEQUENCENUMBER);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.SINT64) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_SEQUENCENUMBER + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.SINT64) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.SINT64));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	// Attribute UserData
	
	public String get_UserData() {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_USERDATA);
        
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_USERDATA + " could not be found");
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_USERDATA + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING) + ".");
		}
        
		if (currentProperty.getValue() == null) {
			return null;
		}
        
		return (String)currentProperty.getValue().getValue();
	}
	    
			
	public void set_UserData(String newValue) {
		
		CIMProperty currentProperty = this.cimInstance.getProperty(CIM_J2eeNotification.CIM_PROPERTY_USERDATA);
    	
		if (currentProperty == null) {
			throw new CIMException(CIMException.CIM_ERR_NO_SUCH_PROPERTY, "The property " + CIM_J2eeNotification.CIM_PROPERTY_USERDATA + " could not be found");
    		
		} else if (!CIM_J2eeNotificationHelper.isValid_UserData(newValue)) {
			throw new InvalidParameterException("The value " + newValue + " is not valid for property " + CIM_J2eeNotification.CIM_PROPERTY_USERDATA);
    		
		} else if (currentProperty.getType() == null || currentProperty.getType().getType() != CIMDataType.STRING) {
			throw new CIMException(CIMException.CIM_ERR_TYPE_MISMATCH, "The property " + CIM_J2eeNotification.CIM_PROPERTY_USERDATA + " is not of expected type " + CIMDataType.getPredefinedType(CIMDataType.STRING) + ".");
		}
    	
		CIMValue updatedValue = new CIMValue(newValue, new CIMDataType(CIMDataType.STRING));
		currentProperty.setValue(updatedValue);
	}	
	    
	

	
	
	//*****************************************************
	// Invoke methods
	//*****************************************************
	
	

}
